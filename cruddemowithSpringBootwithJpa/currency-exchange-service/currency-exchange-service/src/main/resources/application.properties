spring.application.name=currency-exchange
server.port=8000

#connecting the application to the config server
spring.config.import=optional:configserver:http://localhost:8888
#limit-service will be talking to the configserver on port 8888
#we will be running configserver on port 8888
#to see all the sql queries that are generated:
spring.jpa.show-sql=true
#since a random url is generated for in memory database when we use com.h2database, so we should configure it to a specific url to able to use it everywhere with the same name:
spring.datasource.url=jdbc:h2:mem:testdb

spring.h2.console.enabled=true
#data.sql file is loaded before the creation of the table, wierd but true, so to load the data.sql file after the initialization of the table:
spring.jpa.defer-datasource-initialization=true
#property to register this app with eureka server(although just by adding the dependency of eureka server the app gets registered with the eureka
#naming server but providing a specfic property for this work makes it more suitable bcz if in future the port of the eureka server changes then we can directly make those change here)
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
#we can run   an  instance or copy of an CurrencyExchange  application on different port ie 8001  by clicking "Run Button -> Run Configuration".
#Then right click on your "Application name" -> click on "Duplicate".
#Then choose "Arguments" tab -> In "VM Arguments" type this.
#-Dserver.port=8001

#configuring the number of retry attempts
resilience4j.retry.instances.sample-api.maxAttempts=4
#configuring the duration b/w each retry ie the setting time gap b/w 2 consecutive retries
resilience4j.retry.instances.sample-api.waitDuration=1s

resilience4j.circuitbreaker.instances.default.failureRateThreshold=90
#configuring the period limit for ratelimiter
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s
#configuring the no of calls that can be made within the period that is in the above property
resilience4j.ratelimiter.instances.default.limitForPeriod=2
#configuration for distributed tracing server
#specifying the percent of requests to be traced, where 1 means 100%
management.tracing.sampling.probability=1.0
#log the application name , traceid
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]

